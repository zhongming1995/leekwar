// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        colorr: {
          value: [1,1,1,1],
          editor: {
            tooltip: "颜色"
            }
        }
        width: {
          value: 0.2,
          editor: {
            tooltip: "流光宽度"
          }
        }
        strength: {
          value: 2,
          editor: {
            tooltip: "流光增亮强度"
          }
        }
        offset: {
          value: 0.5,
          editor: {
            tooltip: "流光偏移值"
          }
        }
        speed: {
          value: 0.3,
          editor: {
            tooltip: "速度"
          }
        }
        distancee: {
          value: 1.5,
          editor: {
            tooltip: "距离长度"
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ARGS{
    float width;
    float strength;
    float offset;
    float speed;
    vec4  colorr;
    float distancee;
  };

  void main () {
    // vec4 color = vec4(1, 1, 1, 1);
    vec4 color = colorr;
    color *= texture(texture, v_uv0);

    float k = offset;
    float time_step = -width;
    time_step += mod(cc_time.x, distancee + 0.2 * width)/speed;

    if (v_uv0.x >= -v_uv0.y * k + time_step && v_uv0.x <= -v_uv0.y * k + width + time_step ) {
      color *= strength;
    }

    gl_FragColor = color;
  }
}%
